--Ответы на фразы
1) Создать таблицу базы данных в которой будут храниться строки и ответы на сообщения (4 столбика: id primary key, server_id - айди дискор сервера, на котором работает бот, request_str - строка на которую бот будет реагировать, response_str - что бот отвечает). Рекомендую установить локальную MySQL, настроить переадресацию на роутере, и бот сможет конектиться к твоей бд, по ip и порту.

2) Реализовать возможность добавлять и удалять фразы из бд через команду. Например:
>add "request_str" "response_str"
>remove "request_str"

3) Прослушивать сообщения на сервере, делать запрос к базе данных и получать request_str и response_str для текущего сервера, проверять наличие в сообщении одной из request_str (как подстроки). Если есть, бот отправляет сообщение "response_str"

--Osu new best
1) Создать таблицу БД в которой будут храниться данные игроков, активность которых будет отслеживаться (id primary key, server_id, osu_nickname, gamemode).

2) Создать noSQL БД, в которой будут храниться json объекты (get_user и get_user_best). 

3) Реализовать возможность добавлять и удалять отслеживаемых игроков
>osu_add "gamemode(0, 1, 2, 3)" "osu_nickname"
или
>osu_add "gamemode(0, 1, 2, 3)" "osu_userid"

>osu_remove "osu_nickname"
или
>osu_remove "osu_userid"

4) Реализовать возможность устанавливать канал для обновлений osu new best (default "general")
В нужном канале написать:
>osu_channel set

--Osu multi parse
1)

--Автоматическое присвоение роли пользователю
1) Создать таблицу БД, в которой будут храниться сервера и стандартные роли (id primary key, server_id, role_name, role_id)

2) Реализовать возможность устанавливать стандартную роль, которая будет присваиваться всем новым пользователям.
>role_default set "название роли"
удаление
>role_default remove

--Логирование для поиска ошибок


--Создание рейтинговых таблиц
1) Создать таблицу БД, game_id, game, filter
2) Создать таблицу БД, id, player, score, filterType, isSubmitted(bool), game_id
3) 
Команды:
rating add "gamename" "scoretype"
rating show "gamename"
rating submit "gamename" "score"

фильтр:
SCORE_UNIT = 0
SCORE_TIME = 1

https://cog-creators.github.io/discord-embed-sandbox/ - embed генератор

при сабмите система отправляет запрос о подтверждении скора в модерский канал -> бот ставит эмоции "галочка-крестик", модер должен выбрать либо галочку либо крестик


--Музыка
